@page "/search-by-country"
@page "/search-by-country/{country}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@*
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Components.QuickGrid
*@

<PageTitle>Search universities</PageTitle>

<h1>Search for universities in countries</h1>

@if (allUnis == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p style="display: @InvalidSearch">Country not found</p>
    <table style="display: @ValidSearch" class="table">
        <thead>
            <tr>
                <th>Country</th>
                <th>Name</th>
                <th>State/Province</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (University uni in allUnis)
            {
                <tr>
                    <th>@uni.alpha_two_code</th>
                    <th>@uni.name</th>
                    <th>@uni.stateprovince</th>
                    <th></th>
                </tr>
            }
            
        </tbody>
    </table>
    <p>Number of results: @numResults</p>
    <!--
    <QuickGrid ItemsProvider="@allUnisProvider" Virtualize="true">
        <PropertyColumn Property="@(p => p.alpha_two_code)" Sortable="true" />
    </QuickGrid>
    -->
}

@code {
    [Parameter]
    public String Country { get; set; }

    public University[]? allUnis;
    String InvalidSearch { get; set; } = "None";
    String ValidSearch { get; set; } = "None";

    //GridItemsProvider<University>? allUnisProvider;
    int numResults;

    //protected override async Task OnInitializedAsync()
    //{
    //    allUnisProvider = async req =>
    //    {
    //        var url = NavManager.GetUriWithQueryParameters($"http://universities.hipolabs.com/search?country={Country}", new Dictionary<string, object?>
    //        {
    //            { "skip", req.StartIndex },
    //            { "limit", req.Count },
    //        });

    //        var response = await Http.GetFromJsonAsync<University[]>(url, req.CancellationToken);
    //        return GridItemsProviderResult.From(
    //            items: response!,
    //            totalItemCount: response!.Meta.Results.Total);
    //    };

    //    numResults = (await Http.GetFromJsonAsync<University[]>($"http://universities.hipolabs.com/search?country={Country}"))!.Meta.Results.Total;
    //}

    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrWhiteSpace(Country))
        {
            InvalidSearch = "";
        }
        else
        {
            ValidSearch = "";
            allUnis = await Http.GetFromJsonAsync<University[]>($"http://universities.hipolabs.com/search?country={Country}");
            Console.WriteLine(allUnis[0].name);
            
            numResults = allUnis.Count();
        }
    }

    public class University
    {
        public string alpha_two_code { get; set; }
        public string name { get; set; }
        public string country { get; set; }
        public List<string> web_pages { get; set; }
        public string stateprovince { get; set; }
        public List<string> domains { get; set; }
    }
}