@page "/search-by-country"
@page "/search-by-country/{country}"
@inject HttpClient Http
@using System.Text.Json
@using System.Text.Json.Serialization
@inject NavigationManager NavigationManager
@*
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Components.QuickGrid
*@

<PageTitle>Universities in @Country</PageTitle>

<div class="card bg-light text-dark shadow-lg">
    <div class="card-header text-center">
        <h3>Universities in @Country</h3>        
    </div>
    <div class="card-body">
        @if (allUnis == null || InvalidSearch == "")
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table style="display: @ValidSearch" class="table text-dark">
                <thead>
                    <tr>
                        <th class="text-dark">Country</th>
                        <th class="text-dark">Name</th>
                        <th class="text-dark">State/Province</th>
                        <th class="text-dark">URL</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (University uni in allUnis)
                    {
                        <tr>
                            <th>@uni.country</th>
                            <th>@uni.name</th>
                            <th>@uni.stateprovince</th>
                            <th><a href="#">@uni.domains[0]</a></th>
                        </tr>
                    }
                    
                </tbody>
            </table>
            <!--
            <QuickGrid ItemsProvider="@allUnisProvider" Virtualize="true">
                <PropertyColumn Property="@(p => p.alpha_two_code)" Sortable="true" />
            </QuickGrid>
            -->
        }
        <p style="display: @InvalidSearch">Country not found</p>
    </div>
</div>

@code {
    [Parameter]
    public String? Country { get; set; }

    public University[]? allUnis;
    String? InvalidSearch { get; set; } = "None";
    String? ValidSearch { get; set; } = "None";
    HttpClient http;
    HttpResponseMessage resMessage;
    HttpRequestMessage reqMessage;

    //GridItemsProvider<University>? allUnisProvider;
    int? numResults;

    //protected override async Task OnInitializedAsync()
    //{
    //    allUnisProvider = async req =>
    //    {
    //        var url = NavManager.GetUriWithQueryParameters($"http://universities.hipolabs.com/search?country={Country}", new Dictionary<string, object?>
    //        {
    //            { "skip", req.StartIndex },
    //            { "limit", req.Count },
    //        });

    //        var response = await Http.GetFromJsonAsync<University[]>(url, req.CancellationToken);
    //        return GridItemsProviderResult.From(
    //            items: response!,
    //            totalItemCount: response!.Meta.Results.Total);
    //    };

    //    numResults = (await Http.GetFromJsonAsync<University[]>($"http://universities.hipolabs.com/search?country={Country}"))!.Meta.Results.Total;
    //}

    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrWhiteSpace(Country))
        {
            Console.WriteLine("No Parameter");
            InvalidSearch = "";
        }
        else
        {
            ValidSearch = "";
            http = new HttpClient();
            reqMessage = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"http://universities.hipolabs.com/search?country={Country}")
            };
            resMessage = await http.SendAsync(reqMessage);
            Console.WriteLine(await resMessage.Content.ReadAsStringAsync());

            allUnis = JsonSerializer.Deserialize<University[]>(await resMessage.Content.ReadAsStringAsync());
            Console.WriteLine(allUnis[0].name);
            
            numResults = allUnis.Count();
        }
    }

    public class University
    {
        public string? alpha_two_code { get; set; }
        public string? name { get; set; }
        public string? country { get; set; }
        public List<string?>? web_pages { get; set; }
        public string? stateprovince { get; set; }
        public List<string?>? domains { get; set; }
    }
}